type token =
  | EOF
  | LPAR
  | RPAR
  | OR
  | AND
  | IMPLY
  | NOT
  | VAR of (string)

open Parsing;;
# 2 "parser.mly"
  open Formule
# 15 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* LPAR *);
  258 (* RPAR *);
  259 (* OR *);
  260 (* AND *);
  261 (* IMPLY *);
  262 (* NOT *);
    0|]

let yytransl_block = [|
  263 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000"

let yylen = "\002\000\
\003\000\003\000\003\000\003\000\002\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\006\000"

let yysindex = "\255\255\
\002\255\000\000\002\255\002\255\000\000\015\255\012\255\015\255\
\002\255\002\255\002\255\000\000\253\254\253\254\253\254"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\000\000\010\000\
\000\000\000\000\000\000\000\000\001\000\004\000\007\000"

let yygindex = "\000\000\
\002\000"

let yytablesize = 268
let yytable = "\001\000\
\002\000\011\000\003\000\003\000\007\000\008\000\004\000\004\000\
\005\000\005\000\013\000\014\000\015\000\012\000\009\000\010\000\
\011\000\009\000\010\000\011\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\002\000\002\000\003\000\003\000\003\000\
\004\000\004\000\004\000\005\000"

let yycheck = "\001\000\
\000\000\005\001\001\001\000\000\003\000\004\000\000\000\006\001\
\007\001\000\000\009\000\010\000\011\000\002\001\003\001\004\001\
\005\001\003\001\004\001\005\001\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\002\001\003\001\004\001\
\002\001\003\001\004\001\002\001"

let yynames_const = "\
  EOF\000\
  LPAR\000\
  RPAR\000\
  OR\000\
  AND\000\
  IMPLY\000\
  NOT\000\
  "

let yynames_block = "\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Formule.formule) in
    Obj.repr(
# 21 "parser.mly"
                   (
    _2 )
# 149 "parser.ml"
               : Formule.formule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Formule.formule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Formule.formule) in
    Obj.repr(
# 23 "parser.mly"
                 (
    Or (_1,_3) )
# 158 "parser.ml"
               : Formule.formule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Formule.formule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Formule.formule) in
    Obj.repr(
# 25 "parser.mly"
                  (
    And (_1,_3) )
# 167 "parser.ml"
               : Formule.formule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Formule.formule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Formule.formule) in
    Obj.repr(
# 27 "parser.mly"
                    (
    Imply (_1,_3) )
# 176 "parser.ml"
               : Formule.formule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Formule.formule) in
    Obj.repr(
# 29 "parser.mly"
             (
    Not (_2) )
# 184 "parser.ml"
               : Formule.formule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "parser.mly"
        (
    Var (_1) )
# 192 "parser.ml"
               : Formule.formule))
(* Entry form *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let form (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Formule.formule)
;;
# 34 "parser.mly"
  
# 219 "parser.ml"
