De bonnes nouvelles dans cet ultime rendu : 

 - L'engendrement des clauses du rendu 3 était buggé lorsque le point
    d'articulation était le pari en cours, cela a été corrigé.

 - Les watched literals de tous les rendus ne tenaient pas la route
   car ils n'étaient pas réaffectés convenablement lors des
   backtracks, cela a été corrigé, et leur implémentation est de plus
   maintenant entièrement fonctionnelle.

 - L'affichage des preuves de résolution est non buggé, et la compilation
   se fait en direct.

 - Un fichier de test très simple a été implémenté dans le dossier
   racine, qui peut recevoir toutes les options de dpll.  
   ./test (-setv n) (-setc p) (-sets k) (-wlit) (-rand) (-moms)
   (-dlis) (-graph) -> lance le solveur sur un problème engendré
   aléatoirement, contenant n variables, et p clauses de taille k,
   avec les options voulues.

- La génération de graphe renvoie le graphe complet jusqu'au point
  d'articulation (ce qui n'était pas le cas dans le rendu 3)

-------------------------
Compilation et exécution :
-------------------------

Pour compiler, utiliser le makefile :

- make pour compiler le solveur, le testeur à la racine, et chacune des
  options du rendu 4 (./tseitin, ./latin, ./magique, ./sudoku, ./color)

- make generate pour compiler le générateur de graphes de performances

- make graph pour générer les graphes qui ont été engendrés par le solveur avec l'option -graph

- make clean pour nettoyer les fichiers temporaires.

Pour exécuter les programmes :

- ./dpll (nom_du_fichier) (-wlit) (-rand) (-moms) (-dlis) (-graph) ->
  lance le solveur sur le fichier indiqué en argument (ou le fichier
  ex0.cnf par défaut, dans le répertoire Test), avec les heuristiques
  correspondant aux arguments optionnels qui suivent. L'argument -graph
  permet d'activer l'interactivité du programme.

- Dans le répertoire test : ./test (--help pour voir les différentes
  options proposées) : lance le générateur de tests aléatoires.

- Dans tseitin : ./tseitin (nom_du_fichier) -> génère une instance de
  dpll à partir de la formule logique décrite dans le fichier
  (Test/form0.cnf par défaut), et lance le solveur pour donner une
  solution à cette formule.

- Dans enigmes :
  ./latin n : Génère un carré latin de taille n*n grâce au solveur
  ./magique n : Génère un carré magique de taille n*n grâce au solveur
  ./sudoku n : Résout le sudoku décrit à la ligne n dans le fichier enigmes/grilles.txt
  ./color (nom_du_fichier) k : Résout le problème de k-coloration du graphe décrit dans le fichier (Test/graph0.cnf par défaut)

- Pour l'addition :
  ./addition ['0'-'9' '+' '-']*['=']. La formule doit terminer par le symbole =, puis entrer.
  Le calcul est actuellement fait sur des entiers non signés.

--------------------------------
Description rapide du programme :
--------------------------------

Le programme se décompose en plusieurs modules.

- Core : Ce module interface le programme avec l'entrée qu'il prépare
    pour les autres modules. Il contient les constantes utiles
    (nombres de variables, de clauses) ainsi que des fonctions
    générales utilisées par les autres modules.
    -> Benjamin
    -> François pour les modifications apportées pour le rendu 3

- Clause : Ce module implémente les clauses et la façon dont elles
    sont stockées. Nous avons fais le choix de représenter chaque
    clause par un Set pour accélérer la recherche des
    littéraux. L'algorithme demande de pouvoir accéder à toutes les
    clauses contenant un certain littéral. On regroupe donc ces
    clauses dans une Map indexé par les littéraux de Set. Et pour
    éviter de dupliquer les clauses, on les stocke dans un tableau et
    on les identifie à leur indice. Le module contient aussi les
    fonctions nécessaires à leur utilisation.
    -> François & Benjamin

- Wlit : Ce module gère l'utilisation des watched literals. 
    Il contient deux fonctions principales : 
    - remove : int -> wlit -> wlit, qui réattribue les watched literals lorsque l'on assigne un litéral à vrai.
    - entail : wlit -> set, qui renvoie l'ensemble des clauses à un seul watched literal
    -> François

- Oper : Ce module gère les opérations propres à DPLL à appliquer sur
    les clauses, indépendamment de leur implémentation. Il gère la
    façon dont sont propagées les assignations, avec ou sans les
    Watched Literals.
    -> François

- Test : Module externe appelant une version moins verbeuse de dpll
    sur des entrées générées aléatoirement. Cette génération est
    stupide et ne s'occupe pas de filtrer les clauses absurdes et
    redondante. On peut controler les bornes de la génération ainsi
    que la précision des mesures via des arguments optionnels.
    -> François pour le corps, puis remise en forme par Benjamin

- DPLL : Le corps du programme, qui comme tout bon corps de programme
    qui se respecte, ne fait qu'appeler les modules subalternes pour
    répondre à la requête.
    -> François

- Dpll_test : Même chose en mettant une borne de 10 secondes sur le
    temps d'exécution afin de générer des tests à la chaîne sans
    boucler trop longtemps pour les instances trop compliquées.
    -> Benjamin

- Order : Gère les différents ordres possibles pour le choix des
    variables sur lesquels faire le prochain pari, en fonction des
    heuristiques choisies.  
    -> Benjamin

- Default : Heuristique de base, trie les variable à l'initialisation
    par ordre décroissant selon leur poids dans la formule initiale
    (le nombre de leurs apparitions en tant que litéral), sans mise à
    jour.  
    -> Benjamin

- Rand : Choisit à chaque nouveau pari une variable aléatoirement
  parmi celles restant à affecter.
  -> Benjamin

- Moms : Choisit le litéral ayant le poids le plus fort dans les
  clauses de taille minimale, afin d'accélérer la propagation un
  maximum. Son inplémentation se fait grâce à deux étages
  d'associations, le premier selon les litéraux, et le second selon la
  taille des clauses. x -> k -> p_k(x) donne le nombre d'apparitions
  du litéral x dans les clauses de taille k.
  -> François

- Dlis : Même idée que Moms, en prenant en compte toutes les tailles
  de clauses, en pondérant davantage sur les clauses de petite
  taille. L'implémentation ne se fait plus qu'avec un seul étage
  d'association.
  -> François

- Graph : Affiche le graphe des conflits.
  -> Benjamin

- Proof : Affiche la preuve de résolution.
  -> Benjamin

- Latin : Génère un problème SAT traduisant les contraintes d'un carré latin, sous la forme :
  - Pour tout couple de cases (i,j) sur une même ligne ou colonne, pour toute valeur k dans [1; n]
    ~(i a la valeur k) \/ ~(j a la valeur k)
  - Pour toute case i, (i a la valeur 1)  \/ ... \/ (i a la valeur n)
  Puis lance le solveur sur cette instance, et traduit la carré obtenu.
  -> François

- Magique : Génère un carré magique à l'aide d'un carré gréco latin :
    On génère deux carrés latins diagonaux orthogonaux, c'est à dire
    qu'en faisant un produit cartésien des deux carrés, on obtient
    tous les couples de (1,1) à (n,n). On les traduit ensuite par leur
    valeur en base n, ce qui donne un carré magique.
    Cette méthode ne fonctionne pas pour n=3, ou n=6, donc on gère ces
    cas particuliers directement avec un carré magique qui convient.
    -> François

- Sudoku : Traduit les contraintes d'un sudoku comme un carré latin de
    taille 9x9, composé de 9 carrés latins de taille 3x3.
    -> François

- Color : Traduit les contraintes d'une instance de k-color : mêmes
    clauses que pour le carré latin, en prenant les couples
    représentés par les arêtes plutôt que les couples sur une même
    ligne ou même colonne.
    -> François

- Tseitin : Parse une formule logique, applique tseitin pour obtenir
    un problème Sat équivalent, lance le solveur dessus et traduit le
    résultat obtenu.
    -> François

- Addition : Lit une formule arithmétique composée d'additions et
    soustractions, et effectue les opérations grâce au solveur DPLL,
    grâce aux règles logiques de l'addition (ajout de variables pour
    les bits de retenue et les bits de somme).
    -> Benjamin

- SMT : Parse des contraintes de congruence, et lance DPLL sur le
    problème, en vérifiant que le résultat obtenu vérifie ces
    contraintes.
    -> Benjamin

----------------------------------------
Analyse et comparaison des heuristiques :
----------------------------------------

Les heuristiques rand et default se comportent la plupart du temps de
manière similaire, modulo une plus grande régularité de l'heuristique
default. 

Les heuristiques moms et dlis apportent une amélioration sur de très
grandes instances : certaines instances qui ne terminent pas en temps
raisonnable avec les précédentes heuristiques sont résolues assez
efficacement par chacune des deux heuristique, dlis étant sur les
instances les plus dures souvent la plus efficace. 

Toutefois, dans le cas insatisfiable, ces deux heuristiques se
révèlent plus lentes que default, et en général sur les instances plus
simples elle sont un peu moins efficaces (trop de calculs effectués
pour pas grand chose).

Lorsque l'on fait varier le rapport nombre de clauses/nombre de
variables entre 2 et 10, on remarque un pic de complexité entre 4 et
5. Cela correspond à un rapport qui fournit à peu près une
équiprobabilité de satisfiabilité/insatisfiabilité des instances
générées, d'où leur grande complexité (il faut aller loin dans la
propagation pour détecter les contradictions ou pour trouver une
solution).

Sur les courbes obetenues, les moyennes se valent entre chacune des
heuristiques : les cas insatisfiables compensent l'amélioration des
cas satisfiables des heurisitiques moms et dlis dans le cas des
grosses instances.

Malheureusement, l'heurisitque wlit n'apporte rien d'intéressant la
plupart du temps, et rend même des instance simples pour les autres
heuristiques totalement incalculables en temps raisonnable. Cela se
doit sans doute au fait que la propagation est très limitée avec cette
heuristique.
