type token =
  | EOF
  | LPAR
  | RPAR
  | LBKT
  | RBKT
  | OR
  | AND
  | IMPLY
  | NOT
  | EQUAL
  | DIFF
  | VAR of (string)
  | FUN of (string)

open Parsing;;
# 2 "parser.mly"
  open Type
# 20 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* LPAR *);
  258 (* RPAR *);
  259 (* LBKT *);
  260 (* RBKT *);
  261 (* OR *);
  262 (* AND *);
  263 (* IMPLY *);
  264 (* NOT *);
  265 (* EQUAL *);
  266 (* DIFF *);
    0|]

let yytransl_block = [|
  267 (* VAR *);
  268 (* FUN *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\003\000\003\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000\000\000\000\000"

let yylen = "\002\000\
\003\000\004\000\002\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000\000\000\008\000\013\000\000\000\000\000\
\000\000\001\000\000\000\005\000\006\000\007\000\002\000"

let yydgoto = "\004\000\
\008\000\014\000\015\000"

let yysindex = "\044\000\
\019\255\255\254\002\255\000\000\019\255\002\255\019\255\043\255\
\255\254\255\254\008\255\000\000\002\255\252\254\000\000\037\255\
\014\255\043\255\019\255\019\255\019\255\024\255\000\000\255\254\
\015\255\026\255\255\254\255\254\000\000\000\000\022\255\022\255\
\022\255\000\000\030\255\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\007\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\016\000\006\000\025\000"

let yytablesize = 274
let yytable = "\009\000\
\004\000\009\000\013\000\012\000\027\000\028\000\010\000\012\000\
\024\000\010\000\011\000\011\000\010\000\011\000\022\000\023\000\
\034\000\030\000\025\000\005\000\016\000\006\000\018\000\027\000\
\028\000\034\000\007\000\036\000\021\000\035\000\017\000\039\000\
\037\000\038\000\031\000\032\000\033\000\026\000\029\000\014\000\
\000\000\019\000\020\000\021\000\001\000\002\000\003\000\019\000\
\020\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\009\000\004\000\012\000\009\000\009\000\
\010\000\004\000\004\000\010\000\010\000\011\000\000\000\000\000\
\011\000\011\000"

let yycheck = "\001\001\
\000\000\000\000\001\001\000\000\009\001\010\001\000\000\002\000\
\001\001\011\001\012\001\000\000\011\001\012\001\009\000\010\000\
\002\001\004\001\013\000\001\001\005\000\003\001\007\000\009\001\
\010\001\002\001\008\001\002\001\007\001\024\000\006\000\002\001\
\027\000\028\000\019\000\020\000\021\000\013\000\002\001\000\000\
\255\255\005\001\006\001\007\001\001\000\002\000\003\000\005\001\
\006\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\002\001\004\001\002\001\005\001\006\001\
\002\001\009\001\010\001\005\001\006\001\002\001\255\255\255\255\
\005\001\006\001"

let yynames_const = "\
  EOF\000\
  LPAR\000\
  RPAR\000\
  LBKT\000\
  RBKT\000\
  OR\000\
  AND\000\
  IMPLY\000\
  NOT\000\
  EQUAL\000\
  DIFF\000\
  "

let yynames_block = "\
  VAR\000\
  FUN\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Type.pterms) in
    Obj.repr(
# 26 "parser.mly"
                     (
    _2 )
# 177 "parser.ml"
               : Type.pterms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Type.pterms) in
    Obj.repr(
# 28 "parser.mly"
                         (
    PFun (_1, _3) )
# 186 "parser.ml"
               : Type.pterms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Type.pterms) in
    Obj.repr(
# 30 "parser.mly"
               (
    PList (PVar (_1), _2) )
# 195 "parser.ml"
               : Type.pterms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 32 "parser.mly"
        (
    PVar (_1) )
# 203 "parser.ml"
               : Type.pterms))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Type.ppredicat) in
    Obj.repr(
# 36 "parser.mly"
                    (
    _2 )
# 211 "parser.ml"
               : Type.ppredicat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Type.pterms) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Type.pterms) in
    Obj.repr(
# 38 "parser.mly"
                        (
    PEqual (_1,_3) )
# 220 "parser.ml"
               : Type.ppredicat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Type.pterms) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Type.pterms) in
    Obj.repr(
# 40 "parser.mly"
                       (
    PDiff (_1,_3) )
# 229 "parser.ml"
               : Type.ppredicat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Type.pformule) in
    Obj.repr(
# 44 "parser.mly"
                    (
    _2 )
# 237 "parser.ml"
               : Type.pformule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Type.pformule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Type.pformule) in
    Obj.repr(
# 46 "parser.mly"
                   (
    POr (_1,_3) )
# 246 "parser.ml"
               : Type.pformule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Type.pformule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Type.pformule) in
    Obj.repr(
# 48 "parser.mly"
                    (
    PAnd (_1,_3) )
# 255 "parser.ml"
               : Type.pformule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Type.pformule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Type.pformule) in
    Obj.repr(
# 50 "parser.mly"
                      (
    PImply (_1,_3) )
# 264 "parser.ml"
               : Type.pformule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Type.pformule) in
    Obj.repr(
# 52 "parser.mly"
              (
    PNot (_2) )
# 272 "parser.ml"
               : Type.pformule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Type.ppredicat) in
    Obj.repr(
# 54 "parser.mly"
                    (
    PPred (_2) )
# 280 "parser.ml"
               : Type.pformule))
(* Entry pform *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pterms *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry ppred *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let pform (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Type.pformule)
let pterms (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Type.pterms)
let ppred (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Type.ppredicat)
;;
# 57 "parser.mly"
  
# 315 "parser.ml"
