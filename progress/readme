/!\ Dans cette version du code, le caractère 'c' doit impérativement
être suivi d'un commentaire avant de retourner à la ligne !


-------------------------
Compilation et exécution :
-------------------------

Pour compiler, utiliser le makefile :
- make pour compiler le solveur.
- make test pour compiler le générateur de test.
- make clean pour nettoyer les fichiers temporaires.

Pour exécuter les programmes : 
- ./dpll (nom_du_fichier) (-wlit)
(-rand) (-moms) (-dlis) -> lance le solveur sur le fichier indiqué en
argument (ou le fichier ex0.cnf par défaut, dans le répertoire Test),
avec les heuristiques correspondant aux arguments optionnels qui
suivent.  
- Dans le répertoire test : ./test (--help pour voir les
différentes options proposées) : lance le générateur de tests
aléatoires.

--------------------------------
Description rapide du programme :
--------------------------------

Le programme se décompose en plusieurs modules.

- Core : Ce module interface le programme avec l'entrée qu'il prépare
    pour les autres modules. Il contient les constantes utiles
    (nombres de variables, de clauses) ainsi que des fonctions
    générales utilisées par les autres modules.
    -> Benjamin

- Clause : Ce module implémente les clauses et la façon dont elles
    sont stockées. Nous avons fais le choix de représenter chaque
    clause par un Set pour accélérer la recherche des
    littéraux. L'algorithme demande de pouvoir accéder à toutes les
    clauses contenant un certain littéral. On regroupe donc ces
    clauses dans une Map indexé par les littéraux de Set. Et pour
    éviter de dupliquer les clauses, on les stocke dans un tableau et
    on les identifie à leur indice. Le module contient aussi les
    fonctions nécessaires à leur utilisation.
    -> François & Benjamin

- Wlit : Ce module gère l'utilisation des watched literals. Sa
    fonction principale, update x, prend en entrée une nouvelle
    assignation et renvoie deux ensembles : celui des clauses
    satisfaites par cette nouvelle assignation, et celui des
    assignations nécessaires engendrées par cette dernière. Elle
    change au passage l'attribution des watched literals.
    -> François

- Oper : Ce module gère les opérations propres à DPLL à appliquer sur
    les clauses, indépendamment de leur implémentation. Il gère la
    façon dont sont propagées les assignations, avec ou sans les
    WatchLiterals.
    -> François pour split et propagation, Benjamin pour le reste

- Test : Module externe appelant une version moins verbeuse de dpll
    sur des entrées générées aléatoirement. Cette génération est
    stupide et ne s'occupe pas de filtrer les clauses absurdes et
    redondante. On peut controler les bornes de la génération ainsi
    que la précision des mesures via des arguments optionnels.
    -> François pour le corps, puis remise en forme par Benjamin

- DPLL : Le corps du programme, qui comme tout bon corps de programme
    qui se respecte, ne fait qu'appeler les modules subalternes pour
    répondre à la requête.
    -> François

- Dpll_test : Même chose en mettant une borne de 10 secondes sur le
    temps d'exécution afin de générer des tests à la chaîne sans
    boucler trop longtemps pour les instances trop compliquées.
    -> Benjamin

- Order : Gère les différents ordres possibles pour le choix des
    variables sur lesquels faire le prochain pari, en fonction des
    heuristiques choisies.  
    -> Benjamin

- Default : Heuristique de base, trie les variable à l'initialisation
    par ordre décroissant selon leur poids dans la formule initiale
    (le nombre de leurs apparitions en tant que litéral), sans mise à
    jour.  
    -> Benjamin

- Rand : Choisit à chaque nouveau pari une variable aléatoirement
  parmi celles restant à affecter.
  -> Benjamin

- Moms : Choisit le litéral ayant le poids le plus fort dans les
  clauses de taille minimale, afin d'accélérer la propagation un
  maximum. Son inplémentation se fait grâce à deux étages
  d'associations, le premier selon les litéraux, et le second selon la
  taille des clauses. x -> k -> p_k(x) donne le nombre d'apparitions
  du litéral x dans les clauses de taille k.
  -> François

- Dlis : Même idée que Moms, en prenant en compte toutes les tailles
  de clauses, en pondérant davantage sur les clauses de petite
  taille. L'implémentation ne se fait plus qu'avec un seul étage
  d'association.
  -> François

----------------------
Quelques commentaires :
----------------------

L'implémentation modulaire des programmes nous a pris un peu de
temps. Mais on espère que la facilité à le modifier ainsi obtenue nous
permettra d'en gagner par la suite. Des options de débuggage sont
incluses dans les modules. Pour les afficher, passer le booléen debug
du module souhaité à true. Attention, c'est un peu verbeux.

----------------------------------------
Analyse et comparaison des heuristiques :
----------------------------------------

Les heuristiques rand et default se comportent la plupart du temps de
manière similaire, modulo une plus grande régularité de l'heuristique
default. 

Les heuristiques moms et dlis apportent une amélioration sur de très
grandes instances : certaines instances qui ne terminent pas en temps
raisonnable avec les précédentes heuristiques sont résolues assez
efficacement par chacune des deux heuristique, dlis étant sur les
instances les plus dures souvent la plus efficace. 

Toutefois, dans le cas insatisfiable, ces deux heuristiques se
révèlent plus lentes que default, et en général sur les instances plus
simples elle sont un peu moins efficaces (trop de calculs effectués
pour pas grand chose).

Lorsque l'on fait varier le rapport nombre de clauses/nombre de
variables entre 2 et 10, on remarque un pic de complexité entre 4 et
5. Cela correspond à un rapport qui fournit à peu près une
équiprobabilité de satisfiabilité/insatisfiabilité des instances
générées, d'où leur grande complexité (il faut aller loin dans la
propagation pour détecter les contradictions ou pour trouver une
solution).

Sur les courbes obetenues, les moyennes se valent entre chacune des
heuristiques : les cas insatisfiables compensent l'amélioration des
cas satisfiables des heurisitiques moms et dlis dans le cas des
grosses instances.

Malheureusement, l'heurisitque wlit n'apporte rien d'intéressant la
plupart du temps, et rend même des instance simples pour les autres
heuristiques totalement incalculables en temps raisonnable. Cela se
doit sans doute au fait que la propagation est très limitée avec cette
heuristique.